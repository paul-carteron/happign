[{"path":[]},{"path":"https://paul-carteron.github.io/happign/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://paul-carteron.github.io/happign/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://paul-carteron.github.io/happign/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://paul-carteron.github.io/happign/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://paul-carteron.github.io/happign/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement carteronpaul@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://paul-carteron.github.io/happign/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://paul-carteron.github.io/happign/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://paul-carteron.github.io/happign/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://paul-carteron.github.io/happign/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://paul-carteron.github.io/happign/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://paul-carteron.github.io/happign/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://paul-carteron.github.io/happign/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://paul-carteron.github.io/happign/articles/Getting_started.html","id":"before-starting","dir":"Articles","previous_headings":"","what":"Before starting","title":"Getting started with happign","text":"can load happign package, additional packages need.","code":"library(happign) library(sf) library(tmap)"},{"path":"https://paul-carteron.github.io/happign/articles/Getting_started.html","id":"wfs-and-wms-service","dir":"Articles","previous_headings":"","what":"WFS and WMS service","title":"Getting started with happign","text":"happign use two data type IGN web service : WMS raster : data raster format images (.jpg, .png, .tif) WFS : data shape format (.shp). detailed information available WMS WFS. download data need : API key corresponding layer want ; layer’s name ; shape read sf package","code":""},{"path":"https://paul-carteron.github.io/happign/articles/Getting_started.html","id":"api-keys","dir":"Articles","previous_headings":"WFS and WMS service","what":"API keys","title":"Getting started with happign","text":"API keys can directly retrieved IGN website expert web services (recommend point go look) get_apikeys() function.","code":"get_apikeys() #>  [1] \"administratif\" \"adresse\"       \"agriculture\"   \"altimetrie\"    #>  [5] \"cartes\"        \"cartovecto\"    \"clc\"           \"economie\"      #>  [9] \"environnement\" \"geodesie\"      \"lambert93\"     \"ocsge\"         #> [13] \"ortho\"         \"orthohisto\"    \"parcellaire\"   \"satellite\"     #> [17] \"sol\"           \"topographie\"   \"transports\""},{"path":"https://paul-carteron.github.io/happign/articles/Getting_started.html","id":"layer-name","dir":"Articles","previous_headings":"WFS and WMS service","what":"Layer name","title":"Getting started with happign","text":"API key, possible find names available layers expert web services IGN. example, first layer name WFS format “Administratif” category “ADMINEXPRESS-COG-CARTO.LATEST:arrondissement” , layer’s name can accessed R get_layers_metadata() function. one connects directly IGN site allows last updated resources. can used WMS WFS :","code":"administratif_wfs <- get_layers_metadata(apikey = \"administratif\", data_type = \"wfs\") administratif_wms <- get_layers_metadata(apikey = \"administratif\", data_type = \"wms\")"},{"path":"https://paul-carteron.github.io/happign/articles/Getting_started.html","id":"downloading-the-data","dir":"Articles","previous_headings":"WFS and WMS service","what":"Downloading the data","title":"Getting started with happign","text":"Now know get API key layer name, takes lines get plethora resources. example look beautiful town Penmarch France.","code":""},{"path":"https://paul-carteron.github.io/happign/articles/Getting_started.html","id":"wfs","dir":"Articles","previous_headings":"WFS and WMS service > Downloading the data","what":"WFS","title":"Getting started with happign","text":"First, going get borders Penmarch. Since ’s shape object, get_wfs() used.  ’s simple ! Now rely curiosity explore multiple possibilities IGN offers. example, never wondered many road junctions Penmarch? Spoiler : 192 ","code":"# First retrieve create a point inside Penmarc'h penmarch_point <- st_sfc(st_point(c(-4.370, 47.800)), crs = 4326)  # Then download borders penmarch_borders <- get_wfs(shape = penmarch_point,                             apikey = \"administratif\",                             layer_name = \"LIMITES_ADMINISTRATIVES_EXPRESS.LATEST:commune\") #> 1/1 downloaded  # Checking result tm_shape(penmarch_borders) + # Borders of penmarch    tm_polygons(alpha = 0, lwd = 2) + tm_shape(penmarch_point) + # Point use to retrieve data    tm_dots(col = \"red\", size = 2) +    tm_add_legend(type = \"symbol\", label = \"lat : -4.370, long : 47.800\",                  col = \"red\", size = 1) +    tm_layout(main.title = \"Penmarch borders from IGN\",              main.title.position = \"center\",              legend.position = c(\"right\", \"bottom\"),              frame = FALSE) dikes <- get_wfs(shape = penmarch_borders,                  apikey = get_apikeys()[6],                  layer_name = \"BDCARTO_BDD_WLD_WGS84G:noeud_routier\") #> 1/1 downloaded  dikes <- st_intersection(penmarch_borders, dikes) #> Warning: attribute variables are assumed to be spatially constant #> throughout all geometries  # Checking result tm_shape(penmarch_borders) + # Borders of penmarch    tm_borders(lwd = 2) + tm_shape(dikes) + # Point use to retrieve data    tm_dots(col = \"red\") +    tm_add_legend(type = \"symbol\", label = \"Road junction\", col = \"red\") +    tm_layout(main.title = \"Road nodes recorded by the IGN in Penmarch\",              main.title.position = \"center\",              legend.position = c(\"right\", \"bottom\"),              frame = FALSE)"},{"path":"https://paul-carteron.github.io/happign/articles/Getting_started.html","id":"wms-raster","dir":"Articles","previous_headings":"WFS and WMS service > Downloading the data","what":"WMS raster","title":"Getting started with happign","text":"raster, process function get_wms_raster(). ’s plenty elevation resources inside “altimetrie” category. basic one Digital Elevation Model (DEM MNT French). Borders Penmarch used shape downloading DEM.  Rq : Raster get_wms_raster() SpatRaster object terra package. learn conversion raster type R go check .","code":"layers_metadata <- get_layers_metadata(\"altimetrie\", \"wms\") dem_layer_name <- layers_metadata[2, 1]  mnt <- get_wms_raster(shape = penmarch_borders,                       apikey = \"altimetrie\",                       layer_name = dem_layer_name,                       resolution = 25,                       crs = 4326) #> 1/1 downloading... #> Raster is saved at : #> D:\\Personnel\\Programmation\\R\\Packages Perso\\happign\\vignettes\\ELEVATION_ELEVATIONGRIDCOVERAGE_25m.tif  mnt[mnt < 0] <- NA # remove negative values in case of singularity names(mnt) <- \"Elevation [m]\" # Rename raster ie the title legend  tm_shape(mnt) +    tm_raster(colorNA = NULL) + tm_shape(penmarch_borders)+    tm_borders(lwd = 2)+ tm_layout(main.title = \"DEM of Penmarch\",           main.title.position = \"center\",           legend.position = c(\"right\", \"bottom\"),           legend.bg.color = \"white\", legend.bg.alpha = 0.7,           frame = FALSE)"},{"path":"https://paul-carteron.github.io/happign/articles/SCAN_25_SCAN_100_SCAN_OACI.html","id":"brief-presentation","dir":"Articles","previous_headings":"","what":"Brief presentation","title":"SCAN 25, SCAN 100 et SCAN OACI","text":"Even almost IGN data available general public, layers distributed within stricter framework use. SCAN 25®, SCAN 100® SCAN OACI (associated online services) distributed license conditions can consulted [](https://geoservices.ign.fr/cgu-licences#licence . final use professional associative context free without exception, according terms license. final use general public free charge certain threshold, paying, according appropriate general conditions. infos can found .","code":""},{"path":"https://paul-carteron.github.io/happign/articles/SCAN_25_SCAN_100_SCAN_OACI.html","id":"what-are-they","dir":"Articles","previous_headings":"","what":"What are they ?","title":"SCAN 25, SCAN 100 et SCAN OACI","text":"SCAN 25® unique reference, recognized topographic richness, offers exemplary representation territory (1/25 000) SCAN 100® perfect compromise rather rich topographic representation global visualization territory (1/100 000 SCAN OACI corresponds aeronautical reference maps field civil aviation","code":""},{"path":"https://paul-carteron.github.io/happign/articles/SCAN_25_SCAN_100_SCAN_OACI.html","id":"how-to-use-them-with-happign","dir":"Articles","previous_headings":"","what":"How to use them with happign ?","title":"SCAN 25, SCAN 100 et SCAN OACI","text":"layers WMS raster, just use get_wms_raster() function personal apikey. , need create account geoservice site request key “keys” section account. look like : “abc12efghi34j5k678lmnopq” (obviously, fake key). choose layer want Web services IGN SCANs ’s done !","code":"# Create or import a shape shape <- st_polygon(list(matrix(c(-4.373937, 47.79859,                                   -4.375615, 47.79738,                                   -4.375147, 47.79683,                                   -4.373937, 47.79859),                                 ncol = 2, byrow = TRUE))) shape <- st_sfc(shape, crs = st_crs(4326))  my_key <- \"abc12efghi34j5k678lmnopq\" scan25_name <- \"SCAN25TOUR_PYR-JPEG_WLD_WM\"  scan25 <- get_wms_raster(shape,                          apikey = my_key,                          layer_name = scan25_name,                          resolution = 1,   # To have full resolution                          filename = \"SCAN25\") # This resource need to be downloaded on disk"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/completion_of_ign_data_road_example.html","id":"context","dir":"Articles > Web_only","previous_headings":"","what":"Context","title":"Completion of IGN data, road example","text":"compare completeness IGN data, OpenStreetMap data used. retrieved package osmextract. study area territory regional natural park Massif des Bauges located Northern Alps, Bauges massif. area 900 km2, spread departments Savoie Haute-Savoie. made 67 communes.","code":""},{"path":"https://paul-carteron.github.io/happign/articles/web_only/completion_of_ign_data_road_example.html","id":"extract-pnr-boundary","dir":"Articles > Web_only","previous_headings":"","what":"Extract PNR boundary","title":"Completion of IGN data, road example","text":"extract IGN data happign, necessary geographical input. chose commune Annecy located PNR Massif des Bauges. happign contains cog_2022 dataset allows find insee code commune retrieve boundary get_apicarto_commune.","code":"code_insee <- cog_2022[cog_2022$LIBELLE == \"Annecy\", 1][1] #use cog_2022 happign dataset to find insee code annecy <- get_apicarto_commune(code_insee) # get annecy boundary  pnr <- get_wfs(annecy,                 apikey = \"environnement\",                layer_name = \"PROTECTEDAREAS.PNR:pnr\") # search for pnr containinng annecy qtm(pnr) #quick check"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/completion_of_ign_data_road_example.html","id":"extract-roads-data","dir":"Articles > Web_only","previous_headings":"","what":"Extract roads data","title":"Completion of IGN data, road example","text":"","code":"## From ign bdcarto with happign all_road_ign <- get_wfs(pnr,                         apikey = \"cartovecto\",                         layer_name = \"BDCARTO_BDD_WLD_WGS84G:troncon_route\")  road_ign <- st_intersection(all_road_ign, pnr)  ## from osm data with osmextract all_road_osm <- oe_get(\"Savoie\",                        provider = \"openstreetmap_fr\",                        stringsAsFactors = FALSE,                        force_download = TRUE,                         force_vectortranslate = TRUE,                        quiet = TRUE)  road_osm <- st_intersection(all_road_osm, pnr) |>    filter(highway %in% c(\"primary\", \"primary_link\", \"secondary\",\"secondary_link\",                           \"tertiary\", \"tertiary_link\", \"trunk\", \"trunk_link\",                           \"residential\", \"cycleway\", \"living_street\", \"unclassified\",                           \"motorway\", \"motorway_link\", \"pedestrian\", \"steps\",                          \"track\",\"service\", NA))"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/completion_of_ign_data_road_example.html","id":"results","dir":"Articles > Web_only","previous_headings":"","what":"Results","title":"Completion of IGN data, road example","text":"data set provided osmextract contains 4 times linear BDCARTO ign. careful however, osmextract data requires verifications IGN data : 25% OSM dataset unqualified roads (highway == NA).","code":"# who has the longest ? sum(st_length(road_ign)) #> 1683201 [m] sum(st_length(road_osm)) #> 6752370 [m]  # plot results map <- tm_shape(pnr)+    tm_borders()+ tm_shape(road_osm)+    tm_lines(col = \"firebrick\", lwd = 2)+ tm_shape(road_ign)+    tm_lines(col = \"#95C019\", lwd = 2)+ tm_add_legend(type = \"fill\",               labels = c(\"IGN Roads\", \"OSM Roads\"),               col = c(\"#95C019\", \"firebrick\"))  map"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/happign_for_foresters.html","id":"first-choose-a-zone-of-interest","dir":"Articles > Web_only","previous_headings":"","what":"First choose a zone of interest","title":"happign for foresters","text":"example work Camors forest. First need commune border can obtained insee code. Fortunately, happign provides table containing insee codes (data(\"cog_2022\")). , get_apicarto_commune used download shape Apicarto commune.","code":"data(\"cog_2022\")  insee_code <- cog_2022[grepl(\"^Camors\", cog_2022$LIBELLE),1]  borders <- get_apicarto_commune(insee_code)  tm_shape(borders)+    tm_borders()+    tm_text(\"nom_com\")"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/happign_for_foresters.html","id":"download-cadastral-parcel","dir":"Articles > Web_only","previous_headings":"","what":"Download cadastral parcel","title":"happign for foresters","text":"Cadastral parcels essential forest management. download get_wfs. Rq : IGN WFS can return maximum 1000 features. get_wfs() function overrides limit performing several consecutive requests console show","code":"apikey <- \"parcellaire\" layer_name <- get_layers_metadata(apikey, \"wfs\") name_parcellaire_layer <- layer_name[15,1] # \"CADASTRALPARCELS.PARCELLAIRE_EXPRESS:parcelle\"  parcellaire <- get_wfs(shape = borders,                        apikey = apikey,                        layer_name = name_parcellaire_layer) %>%     st_transform(st_crs(borders)) %>%     st_intersection(borders) #> Features downloaded : 1000...2000...3000...4000...5000...5198 #> although coordinates are longitude/latitude, st_intersection assumes that they #> are planar #> Warning: attribute variables are assumed to be spatially constant throughout all #> geometries  tm_shape(borders)+    tm_borders(col = \"red\", lwd = 2)+ tm_shape(parcellaire)+    tm_polygons(alpha = 0)"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/happign_for_foresters.html","id":"downloading-bd-forêt","dir":"Articles > Web_only","previous_headings":"","what":"Downloading BD Forêt","title":"happign for foresters","text":"first interesting layer forester “BD Forêt” vegetation type assigned area greater equal 0.5 ha (5,000 m²). two layer forest : old one BD Forêt V1 new one BD Forêt V2 can accessed “burger menu” top left interactive map . calculations can done can see :","code":"apikey <- \"environnement\" layer_name <- get_layers_metadata(apikey, \"wfs\") name_BDV1 <- layer_name[1,1] name_BDV2 <- layer_name[2,1]  BDV1 <- get_wfs(borders, apikey, name_BDV1) %>%     st_transform(st_crs(borders)) %>%     st_intersection(borders) #> Features downloaded : 153 #> although coordinates are longitude/latitude, st_intersection assumes that they #> are planar  BDV2 <- get_wfs(borders, apikey, name_BDV2) %>%    st_transform(st_crs(borders)) %>%    st_intersection(borders) #> Features downloaded : 365 #> although coordinates are longitude/latitude, st_intersection assumes that they #> are planar  tm_shape(BDV1) +    tm_polygons(col = \"libelle\",                popup.vars = names(BDV1)[1:(ncol(BDV1)-2)],                legend.show = FALSE)+ tm_shape(BDV2) +     tm_polygons(col = \"tfv\",                 alpha = 0.5,                 popup.vars = names(BDV2)[1:(ncol(BDV2)-2)],                 legend.show = FALSE) + tm_shape(borders) +    tm_borders(lwd = 2) forest_type_BDV2 <- BDV2 %>%   mutate(area = as.numeric(st_area(geometry))) %>%   st_drop_geometry() %>%   group_by(essence) %>%   summarise(sum_area = sum(area)/10000) %>%   arrange(desc(sum_area)) %>%   mutate(essence = as.factor(essence))  ggplot()+   geom_col(data = forest_type_BDV2,            aes(x = rev(reorder(essence, sum_area)),                y = sum_area,                fill = as.factor(essence)))+   theme_bw()+   labs(title = \"Surface couverte par essences [ha]\",        y = \"Surface [ha]\",        fill = \"Essence :\")+   theme(axis.text.x = element_blank())"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/happign_for_foresters.html","id":"detect-protected-area","dir":"Articles > Web_only","previous_headings":"","what":"Detect protected area","title":"happign for foresters","text":"One information really want work forest management zone interest inside protected area. example code design automatically test every layer starting “PROTECTED” can sure . , can click map, point shape informations.","code":"apikey <- \"environnement\" protected_area_names <- get_layers_metadata(apikey, \"wfs\") %>%     filter(grepl(\"^PROTECTED\", Name)) %>%     pull(Name)  all_protected_area <- map(.x = protected_area_names,                           .f = ~ try(get_wfs(borders, apikey, .x), silent = TRUE)) %>%     set_names(protected_area_names) %>%     discard(~ dim(.)[2] == 1)  # Plot the result tm_shape(all_protected_area[[1]])+    tm_polygons(group = \"APB\", alpha = 0.8, col = \"blue\")+ tm_shape(all_protected_area[[2]])+    tm_dots(group = \"Point rencontre des secours en forêts\", col = \"red\")+ tm_shape(all_protected_area[[3]])+    tm_polygons(group = \"SIC\", alpha = 0.8, col = \"purple\")+ tm_shape(all_protected_area[[4]])+    tm_polygons(group = \"Znieff 2\", alpha = 0.8, col = \"pink\")+ tm_shape(all_protected_area[[5]])+    tm_polygons(group = \"ZPS\", alpha = 0.8, col = \"green\")+ tm_shape(borders,is.master = TRUE) +    tm_borders(lwd = 2)"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/happign_for_foresters.html","id":"mns-mnt-and-mnh","dir":"Articles > Web_only","previous_headings":"","what":"MNS, MNT and MNH…","title":"happign for foresters","text":"’s always good know terrain topologie. IGN offers MNT MNS download. reminder, MNT corresponds surface ground MNS real surface (case, trees). thus easy find height trees subtracting DTM MNS.","code":"layers_name <- get_layers_metadata(\"altimetrie\", \"wms\") mnt_name <- layers_name[3,1] # \"ELEVATION.ELEVATIONGRIDCOVERAGE.HIGHRES\" mns_name <- layers_name[4,1] # \"ELEVATION.ELEVATIONGRIDCOVERAGE.HIGHRES.MNS\"  mnt <- get_wms_raster(borders, \"altimetrie\", resolution = 5, mnt_name) #> 1/1 downloading... #> Raster is saved at : #> /private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/Rtmp68lJFA/file6cb123a86596.tif mns <- get_wms_raster(borders, \"altimetrie\", resolution = 5, mns_name) #> 1/1 downloading... #> Raster is saved at : #> /private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/Rtmp68lJFA/file6cb18a058de.tif  level_curve <- get_wfs(borders, \"altimetrie\", \"ELEVATION.CONTOUR.LINE:courbe\") %>%     st_intersection(borders) #> Features downloaded : 186 #> although coordinates are longitude/latitude, st_intersection assumes that they #> are planar #> Warning: attribute variables are assumed to be spatially constant throughout all #> geometries  # Calculate digital height model i.e. tree height mnh <- mns - mnt mnh[mnh < 0] <- NA  # Remove negative value  mnh[mnh > 50] <- 40 # Remove height more than 50m  tm_shape(mnh) +   tm_raster(style = \"cont\",              title = \"Height\",             palette = \"-Spectral\",             colorNA = \"grey\",             showNA = F) + tm_shape(level_curve)+    tm_lines(col = \"darkgrey\")+ tm_shape(borders)+    tm_borders(lwd = 2, col = \"red\") #> stars object downsampled to 973 by 1028 cells. See tm_shape manual (argument raster.downsample)"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/happign_for_foresters.html","id":"ndvi","dir":"Articles > Web_only","previous_headings":"","what":"NDVI","title":"happign for foresters","text":"code present calculation NDVI. informations palette come website value range NDVI -1 1. (Near Infrared - Red) / (Near Infrared + Red) : Water low reflectance red, almost NIR (near infrared) reflectance. difference small negative, sum small, NDVI large negative. Plants low reflectance red, strong NIR reflectance. difference large positive, sum just difference, NDVI large positive. Categories somewhat arbitrary, can find various rules thumb, : Negative values NDVI (values approaching -1) correspond water. Values close zero (-0.1 0.1) generally correspond barren areas rock, sand, snow. Low, positive values represent shrub grassland (approximately 0.2 0.4), high values indicate temperate tropical rainforests (values approaching 1). low values NDVI (0.1 ) correspond water, barren areas rock, sand, snow. Moderate values represent shrub grassland (0.2 0.3), high values indicate temperate tropical rainforests (0.6 0.8).","code":"# To show the possibility of 20cm resolution for IRC, let's take only the biggest parcels biggest_parcels <- parcellaire %>%     mutate(area = st_area(.)) %>%     slice_max(area)  irc <- get_wms_raster(shape = biggest_parcels,                       apikey = \"ortho\",                       resolution = 0.2,                       layer_name = \"ORTHOIMAGERY.ORTHOPHOTOS.IRC\") #> 1/8 downloading... #> 2/8 downloading... #> 3/8 downloading... #> 4/8 downloading... #> 5/8 downloading... #> 6/8 downloading... #> 7/8 downloading... #> 8/8 downloading... #> Raster is saved at : #> /private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/Rtmp68lJFA/file6cb158d71fb9.tif  # calculate ndvi from near_infrared and infrared ndvi_fun <- function(nir, red){   (nir - red) / (nir + red) }  ndvi <- lapp(irc[[c(1, 2)]],             fun = ndvi_fun)  # palette for plotting breaks_ndvi <- c(-1,-0.2,-0.1,0,0.025 ,0.05,0.075,0.1,0.125,0.15,0.175,0.2 ,0.25 ,0.3 ,0.35,0.4,0.45,0.5,0.55,0.6,1)     palette_ndvi <- c(\"#BFBFBF\",\"#DBDBDB\",\"#FFFFE0\",\"#FFFACC\",\"#EDE8B5\",\"#DED99C\",\"#CCC782\",\"#BDB86B\",\"#B0C261\",\"#A3CC59\",\"#91BF52\",\"#80B347\",\"#70A340\",\"#619636\",\"#4F8A2E\",\"#407D24\",\"#306E1C\",\"#216112\",\"#0F540A\",\"#004500\")  tm_shape(borders)+    tm_borders(lwd = 2, col = \"red\")+ tm_shape(ndvi)+    tm_raster(stretch.palette = F,              style = \"cont\",              title = \"NDVI\",              breaks = breaks_ndvi,              palette = palette_ndvi,              colorNA = NULL)+ tm_shape(biggest_parcels, is.master = TRUE)+    tm_borders(lwd = 2, col = \"blue\") #> stars object downsampled to 949 by 1054 cells. See tm_shape manual (argument raster.downsample) #> Warning: Breaks contains positive and negative values. Better is to use #> diverging scale instead, or set auto.palette.mapping to FALSE."},{"path":"https://paul-carteron.github.io/happign/articles/web_only/happign_for_foresters.html","id":"info-on-raster","dir":"Articles > Web_only","previous_headings":"NDVI","what":"Info on raster","title":"happign for foresters","text":"resources, essential additional information order use properly. example, forest field, date picture taken important object study dynamic. function get_wms_info() allows get, exist, additional information raster layers. call function get_wms_info indicates orthophoto taken 2019-05-15. Rq : information returned corresponds centroid input shape","code":"# info_sup <- get_wms_info(shape = borders, #                          apikey = \"ortho\", #                          layer_name = \"ORTHOIMAGERY.ORTHOPHOTOS.BDORTHO\") # info_sup"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/happign_for_foresters.html","id":"the-gloss-index","dir":"Articles > Web_only","previous_headings":"","what":"The gloss index","title":"happign for foresters","text":"gloss index represents average image glosses. index therefore sensitive brightness soil, related moisture presence salts surface. characterizes especially albedo (solar radiation reflected back atmosphere). gloss index allows us estimate whether observed surface feature light dark.","code":"# calculate gloss_index from near_infrared and infrared gloss_fun <- function(nir, red){   sqrt(red^2 + nir^2) }  gloss_index <- lapp(irc[[c(1, 2)]],             fun = gloss_fun)  tm_shape(borders)+    tm_borders(lwd = 2, col = \"red\")+ tm_shape(gloss_index)+    tm_raster(style = \"cont\",               title = \"GLOSS INDEX\")+ tm_shape(biggest_parcels, is.master = T)+    tm_borders(lwd = 2, col = \"blue\") #> stars object downsampled to 949 by 1054 cells. See tm_shape manual (argument raster.downsample)"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/happign_for_foresters.html","id":"last-but-not-least-bd-topo","dir":"Articles > Web_only","previous_headings":"","what":"Last but not least… BD Topo","title":"happign for foresters","text":"BD topo IGN covers coherent way geographical administrative entities national territory. can find : Administrative (boundaries administrative units); Addresses (mailing addresses) ; Building (constructions) ; Hydrography (water-related features) ; Named places (place locality toponym describing natural space inhabited place); Land use (vegetation, foreshore, hedge); Services activities (utilities, energy storage transportation, industrial sites); Transportation (road, rail air infrastructure, routes); Regulated areas (areas subject specific regulations). example choose download water-related data :","code":"cour_eau <- get_wfs(borders, \"topographie\", \"BDTOPO_V3:cours_d_eau\") %>%     st_intersection(borders) #> Features downloaded : 45 #> although coordinates are longitude/latitude, st_intersection assumes that they #> are planar #> Warning: attribute variables are assumed to be spatially constant throughout all #> geometries  detail_hydro <- get_wfs(borders, \"topographie\", \"BDTOPO_V3:detail_hydrographique\")  %>%     st_intersection(borders) #> Features downloaded : 25 #> although coordinates are longitude/latitude, st_intersection assumes that they #> are planar #> Warning: attribute variables are assumed to be spatially constant throughout all #> geometries  # water detected by satellite surf_hydro <- get_wfs(borders, \"topographie\", \"BDTOPO_V3:surface_hydrographique\")  %>%     st_intersection(borders) #> Features downloaded : 85 #> although coordinates are longitude/latitude, st_intersection assumes that they #> are planar #> Warning: attribute variables are assumed to be spatially constant throughout all #> geometries  tm_shape(cour_eau)+    tm_lines(col = \"blue\")+ tm_shape(detail_hydro)+    tm_dots(col = \"red\")+ tm_shape(surf_hydro)+    tm_polygons(\"steelblue\")+ tm_shape(borders)+    tm_borders(lwd = 2)"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/happign_for_foresters.html","id":"what-about-history","dir":"Articles > Web_only","previous_headings":"","what":"What about history ?","title":"happign for foresters","text":"“Etat-major” map general map France made, first version, 19th century. get :","code":"etat_major <- get_wms_raster(shape = borders,                             apikey = \"cartes\",                             resolution = 1,                             layer_name = \"GEOGRAPHICALGRIDSYSTEMS.ETATMAJOR40\") #> 1/16 downloading... #> 2/16 downloading... #> 3/16 downloading... #> 4/16 downloading... #> 5/16 downloading... #> 6/16 downloading... #> 7/16 downloading... #> 8/16 downloading... #> 9/16 downloading... #> 10/16 downloading... #> 11/16 downloading... #> 12/16 downloading... #> 13/16 downloading... #> 14/16 downloading... #> 15/16 downloading... #> 16/16 downloading... #> Raster is saved at : #> /private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/Rtmp68lJFA/file6cb11fe81a9e.tif  # raster is very large and tmap cannot plot it. Convert to stars as below allow for quick plotting # saving raster to disk allow full resolution : writeRaster(etat_major, \"test.tif\")  etat_major <- st_as_stars(etat_major, ignore_file = TRUE)  tm_shape(etat_major)+    tm_rgb()+ tm_shape(borders)+    tm_borders(lwd = 3, col = \"red\") #> stars object downsampled to 973 by 1029 cells. See tm_shape manual (argument raster.downsample)"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/resolution_for_raster.html","id":"the-limitations-of-the-ign-api","dir":"Articles > Web_only","previous_headings":"","what":"The limitations of the IGN API","title":"Resolution for raster","text":"APIs IGN allow manipulate resolution raster specifying height width image number pixels. Let us imagine square 5000m 5000m. obtain resolution 2m (words 1 pixel = 2m), necessary make request height width raster equal 2500. However, two parameters limited 2048x2048, words, want resolution 1m area larger 2048, split area several tiles. exactly get_wms_raster() works.","code":""},{"path":[]},{"path":"https://paul-carteron.github.io/happign/articles/web_only/resolution_for_raster.html","id":"first-step","dir":"Articles > Web_only","previous_headings":"How it work ?","what":"First step","title":"Resolution for raster","text":"Lets take zone larger 2048x2048m illustrate.","code":"polygon <- st_sfc(st_polygon(list(matrix(c(-4.327240, 47.81416,                                       -4.327240, 47.91364,                                       -4.262695, 47.91364,                                       -4.262695, 47.81416,                                       -4.327240, 47.81416),                                       ncol = 2, byrow = TRUE))), crs = st_crs(4326))  tm_shape(polygon)+    tm_borders()"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/resolution_for_raster.html","id":"second-step","dir":"Articles > Web_only","previous_headings":"How it work ?","what":"Second step","title":"Resolution for raster","text":"Width height shape computed find many tile need match resolution. case take resolution 2m.","code":"resolution <- 2  bbox <- st_bbox(polygon) height <- st_linestring(rbind(c(bbox[1], bbox[2]),                                  c(bbox[1], bbox[4]))) width <- st_linestring(rbind(c(bbox[1], bbox[2]),                                 c(bbox[3], bbox[2]))) width_height <- st_length(st_sfc(list(width, height), crs = 4326)) nb_pixel <- as.numeric(ceiling(width_height/resolution)) n_tiles <- as.numeric(ceiling(nb_pixel/2048)) n_tiles #> [1] 2 3"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/resolution_for_raster.html","id":"third-step","dir":"Articles > Web_only","previous_headings":"How it work ?","what":"Third step","title":"Resolution for raster","text":"example need 2x3 tiles mean 6 tiles cover shape. create tiles, happign use st_make_grid() function sf package possible specify number tiles desired.","code":"grid <- st_make_grid(polygon, n = n_tiles) %>%    st_as_sf() %>%     st_as_sfc()  tm_shape(polygon)+    tm_borders(lwd = 3, col = \"red\")+ tm_shape(grid)+    tm_borders()"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/resolution_for_raster.html","id":"step-four","dir":"Articles > Web_only","previous_headings":"How it work ?","what":"Step four","title":"Resolution for raster","text":"height width one tile calculated build 6 IGN API queries.","code":"tile1 <- st_bbox(grid[[1]])  height <- st_linestring(rbind(c(tile1[1], tile1[2]),                                  c(tile1[1], tile1[4]))) width <- st_linestring(rbind(c(tile1[1], tile1[2]),                                 c(tile1[3], tile1[2]))) width_height <- st_length(st_sfc(list(width, height), crs = 4326)) nb_pixel <- as.numeric(ceiling(width_height/resolution)) nb_pixel #> [1] 1205 1844"},{"path":"https://paul-carteron.github.io/happign/articles/web_only/resolution_for_raster.html","id":"step-five","dir":"Articles > Web_only","previous_headings":"How it work ?","what":"Step five","title":"Resolution for raster","text":"tiles downloaded merge st_mosaic function stars packages. merging, tiles deleted disk final raster saved.","code":""},{"path":"https://paul-carteron.github.io/happign/articles/web_only/resolution_for_raster.html","id":"bonus-step","dir":"Articles > Web_only","previous_headings":"How it work ?","what":"Bonus step","title":"Resolution for raster","text":"optimize number tiles download, intersection made case multipolygon particular shapes","code":"multipolygon <- st_sfc(st_polygon(list(matrix(c(-4.496155, 47.92191,                                                 -4.496155, 47.92375,                                                 -4.389038, 47.92375,                                                 -4.389038, 47.92191,                                                 -4.496155, 47.92191),                                               ncol = 2, byrow = TRUE),                                        matrix(c(-4.273682, 47.82066,                                                 -4.273682, 47.83541,                                                 -4.248962, 47.83541,                                                 -4.248962, 47.82066,                                                 -4.273682, 47.82066),                                               ncol = 2, byrow = TRUE))), crs = st_crs(4326))  # Tile calculation resolution <- 2  bbox <- st_bbox(multipolygon) height <- st_linestring(rbind(c(bbox[1], bbox[2]),                                  c(bbox[1], bbox[4]))) width <- st_linestring(rbind(c(bbox[1], bbox[2]),                                 c(bbox[3], bbox[2]))) width_height <- st_length(st_sfc(list(width, height), crs = 4326)) nb_pixel <- as.numeric(ceiling(width_height/resolution)) n_tiles <- as.numeric(ceiling(nb_pixel/2048))  grid <- st_make_grid(multipolygon, n = n_tiles) %>%    st_as_sf()  filter_grid <- grid %>%       st_filter(multipolygon, .predicate = st_intersects) %>%       st_as_sfc()  tm_shape(multipolygon)+    tm_borders(lwd = 3, col = \"red\")+ tm_shape(grid)+    tm_borders()+ tm_shape(filter_grid)+    tm_polygons(col = \"blue\", alpha = 0.5)"},{"path":"https://paul-carteron.github.io/happign/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Carteron. Author, maintainer.","code":""},{"path":"https://paul-carteron.github.io/happign/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carteron P (2022). happign: R Interface 'IGN' Web Services. https://github.com/paul-carteron, https://paul-carteron.github.io/happign/.","code":"@Manual{,   title = {happign: R Interface to 'IGN' Web Services},   author = {Paul Carteron},   year = {2022},   note = {https://github.com/paul-carteron, https://paul-carteron.github.io/happign/}, }"},{"path":[]},{"path":"https://paul-carteron.github.io/happign/index.html","id":"happign---ign-api-for-r","dir":"","previous_headings":"","what":"happign - IGN API for R","title":"R Interface to IGN Web Services","text":"goal happign facilitate use Web Services API IGN (French National Institute Geographic Forestry Information). happign allow downloading : Shapefile via use WFS service APIcarto Raster via use WMS raster service","code":""},{"path":"https://paul-carteron.github.io/happign/index.html","id":"context","dir":"","previous_headings":"","what":"Context","title":"R Interface to IGN Web Services","text":"Since January 1, 2021, French National Institute Geographic Forestry Information (IGN) made public data French topography, infrastructure, terrain freely available. opening IGN data Etalab 2.0 open license means free access use . facilitate access data, IGN implemented set APIs Web services based OGC standards. spite well supplied documentation, use APIs Web services remains complex set R. happign package created facilitate .","code":""},{"path":"https://paul-carteron.github.io/happign/index.html","id":"rights-of-use-for-ign-data","dir":"","previous_headings":"","what":"Rights of use for IGN data","title":"R Interface to IGN Web Services","text":"Data IGN geoservice website free available open license according principle Etalab 2.0 license since January 1, 2021. data complete IGN’s open data policy since June 1st, 2021. SCAN 25®, SCAN 100® SCAN OACI data free download stream, professional individual wishing develop commercial paper digital offer general public pay fee according General Conditions Use.","code":""},{"path":"https://paul-carteron.github.io/happign/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Interface to IGN Web Services","text":"can install released version happign CRAN : development version GitHub :","code":"install.packages(\"happign\") # install.packages(\"devtools\") devtools::install_github(\"paul-carteron/happign\")"},{"path":"https://paul-carteron.github.io/happign/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"R Interface to IGN Web Services","text":"Package vignettes : Getting started happign : brief intro happign world ; happign foresters : happign can used many ways focus forestry. SCAN 25, SCAN 100 et SCAN OACI : download Scan 25, Scan 100 Scan OACI Resolution raster : IGN tiles limited 2064x2064 pixel. happign happign allows get around limitation. process explained vignette.","code":""},{"path":"https://paul-carteron.github.io/happign/index.html","id":"future-features","dir":"","previous_headings":"","what":"Future features","title":"R Interface to IGN Web Services","text":"IGN offers services. implementation R development : Implement REST API Carto compatible OpenAPI specification (easy quick downloading WFS) Implement isochrone isodistance calculation","code":""},{"path":"https://paul-carteron.github.io/happign/index.html","id":"problems-and-issues","dir":"","previous_headings":"","what":"Problems and Issues","title":"R Interface to IGN Web Services","text":"Please report issues bugs may encounter dedicated page github.","code":""},{"path":"https://paul-carteron.github.io/happign/index.html","id":"system-requirements","dir":"","previous_headings":"","what":"System Requirements","title":"R Interface to IGN Web Services","text":"happign requires R v >= 4.1.0.","code":""},{"path":"https://paul-carteron.github.io/happign/index.html","id":"why-its-called-happign-","dir":"","previous_headings":"","what":"Why it’s called happign ?","title":"R Interface to IGN Web Services","text":"project - obviously - called happign; ’s : “ign” stand … IGN : acronym institute ; “api” stand … API : one interface used retrieve data; addition “h” another “p” pun “happy”. Besides fact love kind humor, simplified use APIs real source happiness, trust . Also, attentive details, can see logo green leaf stuck teeth charming smile. none leaf IGN logo.","code":""},{"path":"https://paul-carteron.github.io/happign/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"R Interface to IGN Web Services","text":"Please note happign project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://paul-carteron.github.io/happign/reference/are_queryable.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a wms layer is queryable with GetFeatureInfo — are_queryable","title":"Check if a wms layer is queryable with GetFeatureInfo — are_queryable","text":"Check wms layer queryable GetFeatureInfo","code":""},{"path":"https://paul-carteron.github.io/happign/reference/are_queryable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a wms layer is queryable with GetFeatureInfo — are_queryable","text":"","code":"are_queryable(apikey)"},{"path":"https://paul-carteron.github.io/happign/reference/are_queryable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a wms layer is queryable with GetFeatureInfo — are_queryable","text":"apikey API key get_apikeys() directly IGN website","code":""},{"path":"https://paul-carteron.github.io/happign/reference/are_queryable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a wms layer is queryable with GetFeatureInfo — are_queryable","text":"character containing name queryable layers","code":""},{"path":[]},{"path":"https://paul-carteron.github.io/happign/reference/cog_2022.html","id":null,"dir":"Reference","previous_headings":"","what":"COG 2022 — cog_2022","title":"COG 2022 — cog_2022","text":"dataset containing insee code wording commune January 1, 2022. COG mean Code Officiel Géographique","code":""},{"path":"https://paul-carteron.github.io/happign/reference/cog_2022.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"COG 2022 — cog_2022","text":"","code":"cog_2022"},{"path":"https://paul-carteron.github.io/happign/reference/cog_2022.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"COG 2022 — cog_2022","text":"vector","code":""},{"path":"https://paul-carteron.github.io/happign/reference/cog_2022.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"COG 2022 — cog_2022","text":"https://www.insee.fr/fr/information/2115000","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_cadastre.html","id":null,"dir":"Reference","previous_headings":"","what":"Apicarto Cadastre — get_apicarto_cadastre","title":"Apicarto Cadastre — get_apicarto_cadastre","text":"Implementation cadastre module IGN's apicarto","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_cadastre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apicarto Cadastre — get_apicarto_cadastre","text":"","code":"# S3 method for sf get_apicarto_cadastre(   x,   section = NULL,   numero = NULL,   code_abs = NULL,   source_ign = \"PCI\" )  # S3 method for sfc get_apicarto_cadastre(   x,   section = NULL,   numero = NULL,   code_abs = NULL,   source_ign = \"PCI\" )  # S3 method for character get_apicarto_cadastre(   x,   section = NULL,   numero = NULL,   code_abs = NULL,   source_ign = \"PCI\" )"},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_cadastre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apicarto Cadastre — get_apicarto_cadastre","text":"x can shape multiple insee code : Shape : cadastral parcels contained downloaded. object class sf sfc. Code insee : filter response INSEE code entered (must character vector character) section character vector character filter response cadastral section code entered (2 characters) numero character vector character filter answers entered parcel number (4 characters) code_abs character vector character filter answers code absorbed commune. prefix useful differentiate communes merged source_ign Can \"BDP\" BD Parcellaire \"PCI\" Parcellaire express. BD Parcellaire discontinued product. use longer recommended longer updated. use PCI Express strongly recommended become mandatory. information comparison two products can found ","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_cadastre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apicarto Cadastre — get_apicarto_cadastre","text":"get_apicarto_cadastrereturn object class sf","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_cadastre.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apicarto Cadastre — get_apicarto_cadastre","text":"#' @usage get_apicarto_cadastre(x, section = NULL, numero = NULL, code_abs = NULL, source_ign = \"PCI\")","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_cadastre.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apicarto Cadastre — get_apicarto_cadastre","text":"","code":"if (FALSE) { library(sf) library(tmap)  # line from the best town in France line <- st_linestring(matrix(c(-4.372215, -4.365177, 47.803943, 47.79772),                              ncol = 2)) line <- st_sfc(line, crs = st_crs(4326))  PCI_shape <- get_apicarto_cadastre(shape, section = c(\"AX\", \"AV\")) BDP_Code <- get_apicarto_cadastre(\"29158\", section = c(\"AX\", \"BR\"),                                   source_ign = \"BDP\")  tm_shape(PCI_shape)+    tm_borders()+ tm_shape(line)+    tm_lines(col = \"red\")  tm_shape(BDP_Code)+    tm_polygons(col = \"section\", border.col = \"black\")  }"},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_commune.html","id":null,"dir":"Reference","previous_headings":"","what":"Apicarto Commune — get_apicarto_commune","title":"Apicarto Commune — get_apicarto_commune","text":"Implementation cadastre module IGN's apicarto commune borders","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_commune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apicarto Commune — get_apicarto_commune","text":"","code":"get_apicarto_commune(x,                      source = \"PCI\")"},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_commune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apicarto Commune — get_apicarto_commune","text":"x can shape, insee code departement code. shape : must object class sf sfc. insee departement code : must object class character. insee code France can retrieved running data(cog_2022) source Can \"BDP\" BD Parcellaire \"PCI\" Parcellaire express. BD Parcellaire discontinued product. use longer recommended longer updated. use PCI Express strongly recommended become mandatory. information comparison two products can found ","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_commune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apicarto Commune — get_apicarto_commune","text":"get_apicarto_communereturn object class sf","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_commune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apicarto Commune — get_apicarto_commune","text":"","code":"if (FALSE) { library(sf) library(tmap)  # Using shape line <- st_linestring(matrix(c(-4.372215, -4.365177, 47.803943, 47.79772),                              ncol = 2)) line <- st_sfc(line, crs = st_crs(4326))  commune <- get_apicarto_commune(line)  tm_shape(commune)+    tm_borders()+ tm_shape(line)+    tm_lines(col = \"red\", lwd = 2)  # Using code_insee commune <- get_apicarto_commune(\"29158\")  tm_shape(commune)+    tm_borders()+    tm_text(\"nom_com\")  # Get multiple communes borders  input <- list(line, \"29171\") borders <- lapply(input, get_apicarto_commune, source = \"PCI\") borders <- do.call(rbind, borders)  tm_shape(borders)+    tm_borders()+    tm_text(\"nom_com\") }"},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_gpu.html","id":null,"dir":"Reference","previous_headings":"","what":"Apicarto module Geoportail de l'urbanisme — get_apicarto_gpu","title":"Apicarto module Geoportail de l'urbanisme — get_apicarto_gpu","text":"Apicarto module Geoportail de l'urbanisme","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_gpu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apicarto module Geoportail de l'urbanisme — get_apicarto_gpu","text":"","code":"get_apicarto_gpu(x,                  ressource = \"zone-urba\",                  partition = NULL,                  categorie = NULL,                  dTolerance = 0)"},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_gpu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apicarto module Geoportail de l'urbanisme — get_apicarto_gpu","text":"x object class sf sfc. NULL, partition must filled partition GPU. ressource character list : \"document\", \"zone-urba\", \"secteur-cc\", \"prescription-surf\", \"prescription-lin\", \"prescription-pct\", \"info-surf\", \"info-lin\", \"info-pct\". See detail info. partition character corresponding GPU partition (can retrieve using get_apicarto_gpu(x, \"document\", partition = NULL)). partition explicitly set, GPU features returned geom override categorie public utility easement according national nomenclature (\"http://www.geoinformations.developpement-durable.gouv.fr/nomenclature-nationale-des-sup-r1082.html\") dTolerance complex shape handle API; using dTolerance allow allows simplify . See ?sf::st_simplify","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_gpu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apicarto module Geoportail de l'urbanisme — get_apicarto_gpu","text":"object class sf","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_gpu.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apicarto module Geoportail de l'urbanisme — get_apicarto_gpu","text":"moment API returned 5000 features. resssources description : \"municipality : information communes (commune RNU, merged commune) \"document' : information urban planning documents (POS, PLU, PLUi, CC, PSMV) \"zone-urba\" : zoning urban planning documents, \"secteur-cc\" : communal map sectors \"prescription-surf\" : surface prescriptions like Classified wooded area, Area contributing green blue framework, Landscape element protected created, Protected open space, ... \"prescription-lin\" : linear prescription like pedestrian path, bicycle path, hedges tree lines protected, ... \"prescription-pct\" : punctual prescription like Building architectural interest, Building protect, Remarkable tree, Protected pools, ... \"info-surf\" : surface information perimeters urban planning documents like Protection drinking water catchments, archaeological sector, noise classification, ... \"info-lin\" : linear information perimeters urban planning documents like Bicycle path created, Long hike, Façade /roof protected historical monuments, ... \"info-pct\" : punctual information perimeters urban planning documents like Archaeological heritage, Listed classified historical monument, Underground cavity, ... \"acte-sup\" : \"assiette-sup-s\" : \"assiette-sup-l\" : \"assiette-sup-p\" : \"generateur-sup-s\" : \"generateur-sup-l\" : \"generateur-sup-p\" :","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apicarto_gpu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apicarto module Geoportail de l'urbanisme — get_apicarto_gpu","text":"","code":"if (FALSE) { library(tmap) library(sf) point <- st_sfc(st_point(c(-0.4950188466302029, 45.428039987269926)), crs = 4326)  # If you know the partition, all GPU features are returned, geom is override partition <- \"DU_17345\" poly <- get_apicarto_gpu(x = NULL, ressource = \"zone-urba\", partition = partition) qtm(poly)+qtm(point, symbols.col = \"red\", symbols.size = 2)  # If you don't know partition (only intersection between geom and GPU features is returned) poly <- get_apicarto_gpu(x = point, ressource = \"zone-urba\", partition = NULL) qtm(poly)+qtm(point, symbols.col = \"red\", symbols.size = 2)  # If you wanna find partition document <- get_apicarto_gpu(point, ressource = \"document\", partition = NULL) partition <- unique(document$partition)  # Get all prescription : /!\\ prescription is different than zone-urba partition <- \"DU_17345\" ressources <- c(\"prescription-surf\", \"prescription-lin\", \"prescription-pct\")  library(purrr) all_prescription <- map(.x = ressources,                         .f = ~ get_apicarto_gpu(point, .x, partition)) }"},{"path":"https://paul-carteron.github.io/happign/reference/get_apikeys.html","id":null,"dir":"Reference","previous_headings":"","what":"List of all API keys from IGN — get_apikeys","title":"List of all API keys from IGN — get_apikeys","text":"API keys manually extract table provided IGN.","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apikeys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of all API keys from IGN — get_apikeys","text":"","code":"get_apikeys()"},{"path":"https://paul-carteron.github.io/happign/reference/get_apikeys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of all API keys from IGN — get_apikeys","text":"character","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_apikeys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of all API keys from IGN — get_apikeys","text":"","code":"if (FALSE) { # One API key get_apikeys()[1]  # All API keys get_apikeys()  }"},{"path":"https://paul-carteron.github.io/happign/reference/get_last_news.html","id":null,"dir":"Reference","previous_headings":"","what":"Print latest news from geoservice — get_last_news","title":"Print latest news from geoservice — get_last_news","text":"function connects directly RSS feed geoservice site get latest information. allows understand resources sometimes available.","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_last_news.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print latest news from geoservice — get_last_news","text":"","code":"get_last_news()"},{"path":"https://paul-carteron.github.io/happign/reference/get_last_news.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print latest news from geoservice — get_last_news","text":"message","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_last_news.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print latest news from geoservice — get_last_news","text":"","code":"if (FALSE) { get_last_news() }"},{"path":"https://paul-carteron.github.io/happign/reference/get_layers_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata for one couple of apikey and data_type — get_layers_metadata","title":"Metadata for one couple of apikey and data_type — get_layers_metadata","text":"Metadata retrieved using IGN APIs. execution time can long depending size metadata associated API key overload IGN servers.","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_layers_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata for one couple of apikey and data_type — get_layers_metadata","text":"","code":"get_layers_metadata(apikey, data_type)"},{"path":"https://paul-carteron.github.io/happign/reference/get_layers_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metadata for one couple of apikey and data_type — get_layers_metadata","text":"apikey API key get_apikeys() directly IGN website data_type \"wfs\" \"wms\". See details information two Webservice formats.","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_layers_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metadata for one couple of apikey and data_type — get_layers_metadata","text":"data.frame","code":""},{"path":[]},{"path":"https://paul-carteron.github.io/happign/reference/get_layers_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metadata for one couple of apikey and data_type — get_layers_metadata","text":"","code":"if (FALSE) { apikey <- get_apikeys()[4] metadata_table <- get_layers_metadata(apikey, \"wms\") all_layer_name <- metadata_table$Name one_abstract <- metadata_table[1, \"Abstract\"]  # list every wfs metadata (warning : it's quite long) list_metadata <- lapply(X = get_apikeys(),                        FUN = get_layers_metadata,                        data_type = \"wfs\")  # Convert list to one single data.frame list_metadata <- do.call(rbind, list_metadata) }"},{"path":"https://paul-carteron.github.io/happign/reference/get_raw_lidar.html","id":null,"dir":"Reference","previous_headings":"","what":"Download raw LIDAR data — get_raw_lidar","title":"Download raw LIDAR data — get_raw_lidar","text":"Check raw LIDAR data available shape location. raw LIDAR data classified; correspond cloud point.","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_raw_lidar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download raw LIDAR data — get_raw_lidar","text":"","code":"get_raw_lidar(shape, destfile = \".\", grid_path = \".\", quiet = F)"},{"path":"https://paul-carteron.github.io/happign/reference/get_raw_lidar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download raw LIDAR data — get_raw_lidar","text":"shape Object class sf sfc. Needs located France. destfile Folder path data downloaded. default set \".\" e.g. current directory grid_path Folder path grid downloaded. default set \".\" e.g. current directory quiet TRUE download silent","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_raw_lidar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download raw LIDAR data — get_raw_lidar","text":"object.","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_raw_lidar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download raw LIDAR data — get_raw_lidar","text":"get_raw_lidar() first download grid containing name LIDAR tiles intersected shape determine ones uploaded. grid downloaded grid_path lidar data destfile. directory, function check grid data already exist avoid re-downloading .","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_raw_lidar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download raw LIDAR data — get_raw_lidar","text":"","code":"if (FALSE) { library(sf)  # Create shape shape <- st_polygon(list(matrix(c(8.852234, 42.55466,                                   8.852234, 42.57289,                                   8.860474, 42.57289,                                   8.860474, 42.55466,                                   8.852234, 42.55466),                                  ncol = 2, byrow = TRUE))) shape <- st_sfc(shape, crs = st_crs(4326))  # Download data to current directory get_raw_lidar(shape)  # Check all .laz file list.files(\".\", pattern = \".laz\", recursive = TRUE) }"},{"path":"https://paul-carteron.github.io/happign/reference/get_wfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Download WFS layer — get_wfs","title":"Download WFS layer — get_wfs","text":"Download shapefile layer IGN Web Feature Service (WFS). , need location giving shape, apikey name layer. can find information IGN website","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_wfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download WFS layer — get_wfs","text":"","code":"get_wfs(shape,         apikey = \"cartovecto\",         layer_name = \"BDCARTO_BDD_WLD_WGS84G:troncon_route\",         filename = NULL,         overwrite = FALSE,         interactive = FALSE)"},{"path":"https://paul-carteron.github.io/happign/reference/get_wfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download WFS layer — get_wfs","text":"shape Object class sf. Needs located France. Bbox shape used intersect features. apikey API key get_apikeys() directly IGN website layer_name Name layer get_layers_metadata(apikey, \"wfs\") directly IGN website filename Either character string naming file connection open writing. (ex : \"test.shp\" \"~/test.shp\") overwrite TRUE, file overwrite interactive set TRUE, need specify apikey layer_name, ask.","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_wfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download WFS layer — get_wfs","text":"get_wfsreturn object class sf","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_wfs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download WFS layer — get_wfs","text":"IGN limits number shapes downloaded time 1000. get_wfs allows override limit making repeated requests large input areas used (ex : France), depending resource, can time consuming; default, filename set, shape saved .shp names long, .gpkg used.","code":""},{"path":[]},{"path":"https://paul-carteron.github.io/happign/reference/get_wfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download WFS layer — get_wfs","text":"","code":"if (FALSE) { library(sf) library(tmap)  # shape from the best town in France penmarch <- read_sf(system.file(\"extdata/penmarch.shp\", package = \"happign\"))  # For quick testing, use interactive = TRUE shape <- get_wfs(shape = penmarch,                  interactive = TRUE)  # For specific use, choose apikey with get_apikey() and layer_name with get_layers_metadata() ## Getting borders of best town in France apikey <- get_apikeys()[1] metadata_table <- get_layers_metadata(apikey, \"wfs\") layer_name <- as.character(metadata_table[32,1])  # Downloading borders borders <- get_wfs(penmarch, apikey, layer_name)  # Plotting result qtm(borders, fill = NULL, borders = \"firebrick\") # easy map  # Get forest_area of the best town in France forest_area <- get_wfs(shape = borders,                        apikey = \"environnement\",                        layer_name = \"LANDCOVER.FORESTINVENTORY.V1:resu_bdv1_shape\")  qtm(forest_area, fill = \"libelle\")  }"},{"path":"https://paul-carteron.github.io/happign/reference/get_wms_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve additional information for wms layer — get_wms_info","title":"Retrieve additional information for wms layer — get_wms_info","text":"wms layer information can found GetFeatureInfo request. function first check info available. , available layers returned.","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_wms_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve additional information for wms layer — get_wms_info","text":"","code":"get_wms_info(   shape,   apikey = \"ortho\",   layer_name = \"ORTHOIMAGERY.ORTHOPHOTOS\",   version = \"1.3.0\" )"},{"path":"https://paul-carteron.github.io/happign/reference/get_wms_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve additional information for wms layer — get_wms_info","text":"shape Object class sf sfc. Needs located France. apikey API key get_apikeys() directly IGN website layer_name Name layer get_layers_metadata(apikey, \"wms\") directly IGN website version version service used. details IGN documentation","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_wms_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve additional information for wms layer — get_wms_info","text":"character containing additional information layer","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_wms_info.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve additional information for wms layer — get_wms_info","text":"#' @usage get_wms_info(shape, apikey = \"ortho\", layer_name = \"ORTHOIMAGERY.ORTHOPHOTOS.BDORTHO\", version = \"1.3.0\" function use centroid shape return info sometime multiple tile.","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_wms_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve additional information for wms layer — get_wms_info","text":"","code":"if (FALSE) { library(sf)  penmarch <- system.file(\"extdata/penmarch.shp\", package = \"happign\")  wms_info <- get_wms_info(penmarch, \"ortho\", \"ORTHOIMAGERY.ORTHOPHOTOS\")  # orthophoto is from summer 2021 wms_info  }"},{"path":"https://paul-carteron.github.io/happign/reference/get_wms_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Download WMS raster layer — get_wms_raster","title":"Download WMS raster layer — get_wms_raster","text":"Download raster layer IGN Web Mapping Services (WMS). , need location giving shape, apikey name layer. can find information IGN website get_apikeys() get_layers_metadata().","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_wms_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download WMS raster layer — get_wms_raster","text":"","code":"get_wms_raster(shape,                apikey = \"altimetrie\",                layer_name = \"ELEVATION.ELEVATIONGRIDCOVERAGE.HIGHRES\",                resolution = 5,                filename = tempfile(fileext = \".tif\"),                crs = 2154,                overwrite = FALSE,                version = \"1.3.0\",                styles = \"\",                interactive = FALSE)"},{"path":"https://paul-carteron.github.io/happign/reference/get_wms_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download WMS raster layer — get_wms_raster","text":"shape Object class sf. Needs located France. apikey API key get_apikeys() directly IGN website. layer_name Name layer get_layers_metadata(apikey, \"wms\") directly IGN website. resolution Cell size meter. See detail information resolution. filename Either character string naming file connection open writing. (ex : \"test.tif\" \"~/test.tif\"). NULL, layer_name used. Default drivers \".tif\" gdal drivers supported, see details info. avoid re-downloads, get_wms raster checks already raster name. , imported R without downloading overwrite set FALSE. crs Numeric, character, object class sf sfc. set EPSG:2154 default. See sf::st_crs() detail. overwrite TRUE, output raster overwrite. version version service used. See detail information version. styles rendering style layers. Set \"\" default. See detail information styles. interactive set TRUE, need specify apikey layer_name, ask.","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_wms_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download WMS raster layer — get_wms_raster","text":"get_wms_raster return object class SpatRaster terra package.","code":""},{"path":"https://paul-carteron.github.io/happign/reference/get_wms_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download WMS raster layer — get_wms_raster","text":"Raster tile limited 2048x2048 pixels depending shape resolution, correct number tiles download calculated. mean setting resolution argument higher base resolution layer multiplies number pixels without increasing precision. example, download BD Alti layer IGN optimal resolution 25m. version styles arguments detailed IGN documentation Using crs argument avoids post-reprojection can time consuming GDAL supported drivers can found ","code":""},{"path":[]},{"path":"https://paul-carteron.github.io/happign/reference/get_wms_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download WMS raster layer — get_wms_raster","text":"","code":"if (FALSE) { library(sf) library(tmap)  # shape from the best town in France penmarch <- read_sf(system.file(\"extdata/penmarch.shp\", package = \"happign\"))  # For quick testing, use interactive = TRUE raster <- get_wms_raster(shape = penmarch, interactive = TRUE)  # For specific use, choose apikey with get_apikey() and layer_name with get_layers_metadata() apikey <- get_apikeys()[4]  # altimetrie metadata_table <- get_layers_metadata(apikey, \"wms\") # all layers for altimetrie wms layer_name <- as.character(metadata_table[2,1]) # ELEVATION.ELEVATIONGRIDCOVERAGE  # Downloading digital elevation model from IGN mnt <- get_wms_raster(penmarch, apikey, layer_name, resolution = 25)  # Preparing raster for plotting mnt[mnt < 0] <- NA # remove negative values in case of singularity names(mnt) <- \"Elevation [m]\" # Rename raster ie the title legend  # Plotting result tm_shape(mnt)+    tm_raster(legend.show = FALSE)+ tm_shape(penmarch)+    tm_borders(col = \"blue\", lwd  = 3) }"},{"path":"https://paul-carteron.github.io/happign/news/index.html","id":"happign-018","dir":"Changelog","previous_headings":"","what":"happign 0.1.8","title":"happign 0.1.8","text":"Correction get_raw_lidar() New vignette “completion_of_ign_data_road_example” Precomputation cran vignette Apply DRY principle option(“timeout”) handling Add “penmarch.shp” internal data test example Better handling filename saving get_wfs()","code":""},{"path":"https://paul-carteron.github.io/happign/news/index.html","id":"happign-017","dir":"Changelog","previous_headings":"","what":"happign 0.1.7","title":"happign 0.1.7","text":"CRAN release: 2022-11-18 Correct bug preventing get_apicarto_commune work dep insee code Adding 1 hour downloading get_wfs() big shape Remove connection IGN news library load. Now get_last_news() can used retrieve last news. Adding interactive parameter get_wfs get_wms_raster allow quick use Catch error get_raw_lidar Change complete vignette “happign forester” website Handling errors tryCatch get_apicarto_plu() now get_apicarto_gpu() : can handle complex shape access ressources APIcarto GPU consistency, now necessary add drivers filename get_wms_raster() function just like get_wfs. automatic addition resolution removed simplicity.","code":""},{"path":"https://paul-carteron.github.io/happign/news/index.html","id":"happign-016","dir":"Changelog","previous_headings":"","what":"happign 0.1.6","title":"happign 0.1.6","text":"CRAN release: 2022-09-16 get_wms_raster() use gdal sf::gdal_utils() downloading terra::vrt() merging quiet faster results. stars package used anymore. get_wms_raster() supports download big raster several gigabytes get_wms_raster() new crs argument New function get_raw_lidar() download raw lidar data New function get_apicarto_commune() download commune borders apicarto new dataset containing names communes associated insee code added Simplify get_layers_metadata() retrieve title, name, abstract Remove dependency tidyr new function get_raw_lidar() download raw lidar data IGN new function get_apicarto_commune download commune borders apicarto “cadastre” IGN","code":""},{"path":"https://paul-carteron.github.io/happign/news/index.html","id":"happign-015","dir":"Changelog","previous_headings":"","what":"happign 0.1.5","title":"happign 0.1.5","text":"CRAN release: 2022-07-18 remove get_iso() remove dependency httr httr2 add get_wms_info() find metadata layer add get_apicarto_plu() (Plan Local d’Urbanisme) Rework get_wms_raster() Adding new apikey “ocsge” Better testing Add insee code package data data(\"code_insee\") get_apicarto_* now support MultiPolygon get_wms_raster now 1h downloading tile instead 1min (low connection)","code":""},{"path":"https://paul-carteron.github.io/happign/news/index.html","id":"happign-014","dir":"Changelog","previous_headings":"","what":"happign 0.1.4","title":"happign 0.1.4","text":"CRAN release: 2022-04-25 Fix resolution get_wms_raster(). Depending shape resolution, multiple tile downloaded combine get right resolution. Also adding vignette Resolution raster explanation New start message based RSS flux IGN website warn user issues (slowdown, shutdown) news resources *get_wms_raster() now fix S2 geometry problems adding method mode argument download.file() freedom type download get_wms_raster() Completion happign_for_forester vignette adding first get_apicarto_* vectorized function cadastre adding shp_to_geojson() function avoid geojsonsf package dependency","code":""},{"path":"https://paul-carteron.github.io/happign/news/index.html","id":"happign-013","dir":"Changelog","previous_headings":"","what":"happign 0.1.3","title":"happign 0.1.3","text":"CRAN release: 2022-03-01 adding connection isochrone isodistance calculation IGN get_iso() new vignette happign forester new vignette SCAN 25, SCAN 100 et SCAN OACI","code":""},{"path":"https://paul-carteron.github.io/happign/news/index.html","id":"happign-012","dir":"Changelog","previous_headings":"","what":"happign 0.1.2","title":"happign 0.1.2","text":"CRAN release: 2022-02-01 adding filename argument get_wms_raster() get_wfs() allowing save data disk. new feature also overcomes problem connection WMS GDAL #1 Automatic weekly detection http errors WFS WMS APIs. Layers readable get_wms_raster()#1 also listed. adding data license IGN (etalab 2.0) readme","code":""},{"path":"https://paul-carteron.github.io/happign/news/index.html","id":"happign-011","dir":"Changelog","previous_headings":"","what":"happign 0.1.1","title":"happign 0.1.1","text":"CRAN release: 2022-01-27 add function test internet connection availability IGN website loading happign) test improvement readme vignette improvement","code":""},{"path":"https://paul-carteron.github.io/happign/news/index.html","id":"happign-010","dir":"Changelog","previous_headings":"","what":"happign 0.1.0","title":"happign 0.1.0","text":"CRAN release: 2022-01-20 add interface WFS, WMS raster service get_wfs() get_wms_raster() add get_apikeys() get_layers_metadata() allow access metadata R","code":""}]
