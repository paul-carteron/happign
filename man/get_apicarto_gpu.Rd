% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_apicarto_gpu.R
\name{get_apicarto_gpu}
\alias{get_apicarto_gpu}
\title{Apicarto module Geoportail de l'urbanisme}
\usage{
get_apicarto_gpu(x,
                 ressource = "zone-urba",
                 partition = NULL,
                 categorie = NULL,
                 dTolerance = 0)
}
\arguments{
\item{x}{An object of class \code{sf} or \code{sfc}. If NULL, \code{partition} must be filled
by partition of GPU.}

\item{ressource}{A character from this list : "document", "zone-urba",
"secteur-cc", "prescription-surf", "prescription-lin", "prescription-pct",
"info-surf", "info-lin", "info-pct". See detail for more info.}

\item{partition}{A character corresponding to GPU partition (can be retrieve
using \code{get_apicarto_gpu(x, "document", partition = NULL)}). If \code{partition}
is explicitly set, all GPU features are returned and \code{geom} is override}

\item{categorie}{public utility easement according to the
national nomenclature ("http://www.geoinformations.developpement-durable.gouv.fr/nomenclature-nationale-des-sup-r1082.html")}

\item{dTolerance}{To complex shape cannot be handle by API; using dTolerance allow
allows to simplify them. See \code{?sf::st_simplify}}
}
\value{
A object of class \code{sf}
}
\description{
Apicarto module Geoportail de l'urbanisme
}
\details{
\strong{/!\ For the moment the API cannot returned more than 5000 features.}

All existing parameters for \code{ressource}  :
\itemize{
\item "municipality : information on the communes (commune with RNU, merged commune)
\item "document' : information on urban planning documents (POS, PLU, PLUi, CC, PSMV)
\item "zone-urba" : zoning of urban planning documents,
\item "secteur-cc" : communal map sectors
\item "prescription-surf" : surface prescriptions like Classified wooded area, Area contributing to the green and blue framework, Landscape element to be protected or created, Protected open space, ...
\item "prescription-lin" : linear prescription like pedestrian path, bicycle path, hedges or tree lines to be protected, ...
\item "prescription-pct" : punctual prescription like Building of architectural interest, Building to protect, Remarkable tree, Protected pools, ...
\item "info-surf" : surface information perimeters of urban planning documents like Protection of drinking water catchments, archaeological sector, noise classification, ...
\item "info-lin" : linear information perimeters of urban planning documents like Bicycle path to be created, Long hike, Fa√ßade and/or roof protected as historical monuments, ...
\item "info-pct" : punctual information perimeters of urban planning documents like Archaeological heritage, Listed or classified historical monument, Underground cavity, ...
\item "acte-sup" :
\item "assiette-sup-s" :
\item "assiette-sup-l" :
\item "assiette-sup-p" :
\item "generateur-sup-s" :
\item "generateur-sup-l" :
\item "generateur-sup-p" :
}
}
\examples{
\dontrun{
library(tmap)
library(sf)
library(dplyr)

# If you know the partition, all GPU features are returned, geom is override
partition <- "DU_75056"
zone_urba <- get_apicarto_gpu(x = NULL, ressource = "zone-urba", partition = partition)
qtm(zone_urba)

# If you don't know partition, only GPU features intersecting shape are returned
point <- st_sfc(st_point(c(2.354, 48.866)), crs = 4326)
zone_urba <- get_apicarto_gpu(x = point, ressource = "zone-urba", partition = NULL)
qtm(zone_urba)+qtm(point)

# If you wanna find partition
document <- get_apicarto_gpu(point, ressource = "document", partition = NULL)
partition <- unique(document$partition)

# Get all prescription : /!\ prescription is different than zone-urba
partition <- "DU_75056"
ressources <- c("prescription-surf", "prescription-lin", "prescription-pct")

all_prescription <- lapply(ressources, get_apicarto_gpu, x = NULL, partition = partition) |>
                    bind_rows()
}
}
